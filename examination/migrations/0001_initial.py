# Generated by Django 4.2.5 on 2023-10-11 21:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        max_length=5, verbose_name="Licence category and subcategory"
                    ),
                ),
                ("description", models.CharField(default="", max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name="Chapter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(max_length=5, verbose_name="Alphanumeric code"),
                ),
                ("description", models.CharField(max_length=150)),
            ],
            options={
                "ordering": ("code",),
            },
        ),
        migrations.CreateModel(
            name="EssayAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model_answer", models.TextField(verbose_name="Essay model answer")),
                (
                    "key_points",
                    models.CharField(max_length=150, verbose_name="Answer key points"),
                ),
                ("category", models.ManyToManyField(to="examination.category")),
            ],
        ),
        migrations.CreateModel(
            name="EssayQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField()),
                ("valid", models.BooleanField(default=True)),
                ("level", models.IntegerField(choices=[(1, "1"), (2, "2"), (3, "3")])),
                ("saving_time", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ("module", "saving_time"),
            },
        ),
        migrations.CreateModel(
            name="SubjectModule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(max_length=5, verbose_name="Alphanumeric code"),
                ),
                ("description", models.CharField(max_length=150)),
                ("category", models.ManyToManyField(to="examination.category")),
            ],
            options={
                "ordering": ("code",),
            },
        ),
        migrations.CreateModel(
            name="MultichoiceQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField(verbose_name="Question text")),
                ("answer", models.TextField(verbose_name="The right answer")),
                (
                    "alt_answer1",
                    models.TextField(verbose_name="The first wrong alternate answer"),
                ),
                (
                    "alt_answer2",
                    models.TextField(
                        verbose_name="The second wrong alternatate answer"
                    ),
                ),
                (
                    "alt_answer3",
                    models.TextField(verbose_name="The third wrong alternate answer"),
                ),
                (
                    "valid",
                    models.BooleanField(default=True, verbose_name="Question validity"),
                ),
                (
                    "level",
                    models.IntegerField(
                        choices=[(1, "1"), (2, "2"), (3, "3")],
                        verbose_name="Training level",
                    ),
                ),
                (
                    "saving_time",
                    models.DateTimeField(auto_now=True, verbose_name="Saving date"),
                ),
                (
                    "chapter",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="examination.chapter",
                        verbose_name="The chapter this question belongs to",
                    ),
                ),
                (
                    "module",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="examination.subjectmodule",
                        verbose_name="The module this question belongs to",
                    ),
                ),
            ],
            options={
                "ordering": ("module", "chapter", "saving_time"),
            },
        ),
        migrations.CreateModel(
            name="MCQuestionUsage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "usage_date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        verbose_name="The date the multichoice question has been used",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="examination.multichoicequestion",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GivenAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model_answer", models.TextField(verbose_name="Essay model answer")),
                (
                    "key_points",
                    models.CharField(max_length=150, verbose_name="Answer key points"),
                ),
                ("right_answer", models.TextField(verbose_name="The right answer")),
                (
                    "alt_answer1",
                    models.TextField(verbose_name="The first wrong alternate answer"),
                ),
                (
                    "alt_answer2",
                    models.TextField(
                        verbose_name="The second wrong alternatate answer"
                    ),
                ),
                (
                    "alt_answer3",
                    models.TextField(verbose_name="The third wrong alternate answer"),
                ),
                ("type", models.IntegerField(choices=[(1, "Online"), (2, "Printed")])),
                (
                    "given_answer",
                    models.TextField(verbose_name="The answer given by user"),
                ),
                ("assignment_time", models.DateTimeField(blank=True, null=True)),
                (
                    "essay_ref",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="examination.essayanswer",
                    ),
                ),
                (
                    "multichoice_ref",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="examination.multichoicequestion",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("user", "assignment_time"),
            },
        ),
        migrations.CreateModel(
            name="EssayQuestionUsage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "usage_date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        verbose_name="The date the essay question has been used",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="examination.essayquestion",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="essayquestion",
            name="module",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="examination.subjectmodule",
                verbose_name="The module this question belongs to",
            ),
        ),
        migrations.AddField(
            model_name="essayanswer",
            name="question",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="examination.essayquestion",
            ),
        ),
        migrations.AddConstraint(
            model_name="multichoicequestion",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("module__isnull", True),
                    ("chapter__isnull", True),
                    _connector="XOR",
                ),
                name="module_xor_chapter",
            ),
        ),
        migrations.AddConstraint(
            model_name="givenanswer",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        models.Q(("essay_ref__isnull", True), _negated=True),
                        models.Q(("model_answer__exact", ""), _negated=True),
                        models.Q(("key_points__exact", ""), _negated=True),
                    ),
                    models.Q(
                        ("essay_ref__isnull", True),
                        ("model_answer__exact", ""),
                        ("key_points__exact", ""),
                    ),
                    _connector="OR",
                ),
                name="in essay set: all fields to be filled in or none",
            ),
        ),
        migrations.AddConstraint(
            model_name="givenanswer",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        models.Q(("multichoice_ref__isnull", True), _negated=True),
                        models.Q(("right_answer__exact", ""), _negated=True),
                        models.Q(("alt_answer1__exact", ""), _negated=True),
                        models.Q(("alt_answer2__exact", ""), _negated=True),
                        models.Q(("alt_answer3__exact", ""), _negated=True),
                    ),
                    models.Q(
                        ("multichoice_ref__isnull", True),
                        ("right_answer__exact", ""),
                        ("alt_answer1__exact", ""),
                        ("alt_answer2__exact", ""),
                        ("alt_answer3__exact", ""),
                    ),
                    _connector="OR",
                ),
                name="in multichoice set: all fields to be filled in or none",
            ),
        ),
        migrations.AddConstraint(
            model_name="givenanswer",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        models.Q(("essay_ref__isnull", True), _negated=True),
                        models.Q(("model_answer__exact", ""), _negated=True),
                        models.Q(("key_points__exact", ""), _negated=True),
                    ),
                    models.Q(
                        models.Q(("multichoice_ref__isnull", True), _negated=True),
                        models.Q(("right_answer__exact", ""), _negated=True),
                        models.Q(("alt_answer1__exact", ""), _negated=True),
                        models.Q(("alt_answer2__exact", ""), _negated=True),
                        models.Q(("alt_answer3__exact", ""), _negated=True),
                    ),
                    _connector="XOR",
                ),
                name="fill in only one set between essay multichoice sets",
            ),
        ),
    ]
